//1357：车厢调度(train),栈
/*
解析：观察发现，整个调度过程其实是在模拟入栈出栈的过程，而这个过程中，
我们可以分成三种状态：栈前、栈中、栈后。我们可以发现，当某个数字出栈了，
说明比它小的数字要么已经出栈了，要么还在栈里，不能是入栈前状态，并且在栈中的顺序是从大到小的(从栈顶往栈底看)，
比如出5，那么1，2，3，4要么已经在5之前出了，要么还在栈中（假如1，3，4在栈中，从栈顶往栈底看依次为4，3，1），
不能是入栈前的状态。如果某个数字要出栈，那么当前在栈中的数字都必须小于它，否则就与栈的性质矛盾，不合法
*/
#include <iostream>
#include <stack>
using namespace std;
int n;
stack<int> s;
int main() {
    cin >> n;
    int a = 1;
    for (int i = 1; i <= n; i++) {      //读入n个数
        int x;
        cin >> x;
        while (a <= x) {                //将a~x依次入栈，比x小的数肯定比x先入栈
            s.push(a);
            a++;
        }
        if (s.top() == x) s.pop();      //如果栈顶元素等于x，出栈，（表示当前x没有被其他数压在栈里）
        else {
            cout << "NO" << endl;
            return 0;
        }
    }
    cout << "YES" << endl;
    return 0;
}
